#!/usr/bin/env ruby

require 'drb'
require 'fileutils'

if File.exist? 'Gemfile'
  require 'rubygems'
  require 'bundler/setup'
end

# NOTE: ARGV is used by the spec runner. If I leave the drb server address
# in ARGV, rspec will think it's an argument to the test runner.
buffet_server = DRbObject.new_with_uri(ARGV.shift)
slave_name = ARGV.shift
framework = ARGV.shift

FileUtils.mkdir_p('./tmp')

if framework == 'RSPEC1'
  require 'spec'
  require 'spec/runner/command_line'
  require File.expand_path('rspec1_formatter', File.dirname(__FILE__))

  Spec::Runner::Formatter::AugmentedTextFormatter.configure buffet_server, slave_name

  while file = buffet_server.next_file_for(slave_name)
    # RSpec1 closes stderr/out after each run, so we reopen them each time
    outlog = File.open('./tmp/buffet.out.log', 'a')
    errlog = File.open('./tmp/buffet.error.log', 'a')

    Spec::Runner::CommandLine.run(
      Spec::Runner::OptionParser.parse(
        ['--format', 'Spec::Runner::Formatter::AugmentedTextFormatter', file],
        errlog,
        outlog
      )
    )
  end
else
  require 'rspec'
  require File.expand_path('rspec2_formatter', File.dirname(__FILE__))

  RSpec::Core::Formatters::AugmentedTextFormatter.configure buffet_server, slave_name

  RSpec.configure do |config|
    config.error_stream = $stderr
    config.output_stream = $stdout
    config.formatter = RSpec::Core::Formatters::AugmentedTextFormatter
  end

  RSpec.configuration.reporter.report(-1) do |reporter|
    RSpec.configuration.run_hook(:before, :suite)
    begin
      while (file = buffet_server.next_file_for(slave_name))
        load File.expand_path(file)
        RSpec.world.example_groups.map { |g| g.run(reporter) }.all? ? 0 : 1
        RSpec.world.example_groups.clear
      end
    ensure
      RSpec.configuration.run_hook(:after, :suite)
    end
  end
end
